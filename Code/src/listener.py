# -*- coding: utf-8 -*-
"""listener.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ocf18fIM99npeF7UprCv4yECwEEcQQ_y
"""

import tweepy
from tweepy import OAuthHandler
from tweepy import Stream
from tweepy.streaming import StreamListener
import simplejson as json

# will take confidential info, visit apps.twitter.com to generate them
consumer_key = ************
consumer_secret = ************
access_token = ************
access_secret = ************

# Creating the authentication object
auth = OAuthHandler(consumer_key, consumer_secret)

# Setting your access token and secret
auth.set_access_token(access_token, access_secret)

# Creating the API object while passing in auth information 
api = tweepy.API([auth], 
        # support for multiple authentication handlers  
        # retry 3 times with 5 seconds delay when getting these error codes
        retry_count=3,retry_delay=5,retry_errors=set([401, 404, 500, 503]), 
        # monitor remaining calls and block until replenished  
        wait_on_rate_limit=True)

# For more details see https://dev.twitter.com/docs/error-codes-responses  

# def process_or_store(tweet):
    # print(json.dumps(tweet))


class MyListener(StreamListener):
 
    def on_data(self, data):
        try:
            with open('tweets.json', 'a') as f: #edit file name/path
                f.write(data)
                return True
        except BaseException as e:
            print("Error on_data: %s" % str(e))
        return True
 
    def on_error(self, status):
        if status == 420:
            #returning False in on_data disconnects the stream
            return False
        else: 
            print(status)
            return True
     

    
def start_stream():
    while True:
        try:
            twitter_stream = Stream(auth, MyListener())
            #twitter_stream.filter(track=[''], async=True) #Enter particular hashtags (topics) to filter
        # in case of an error
        except: 
            continue

start_stream()

from glob import glob
filenames = glob('tweets.json') #Edit file name/path

for INPUT_FILE_NAME in filenames:
    MAX_LINES_PER_FILE = 100000

    with open(INPUT_FILE_NAME, 'r') as infile:
        line_count = 0
        output_file_num = 0

        outfile = open(INPUT_FILE_NAME.split('.')[0] + "_" + str(output_file_num) + ".json", 'w')

        for line in infile:
            if line_count < MAX_LINES_PER_FILE:
                outfile.write(line)
                line_count += 1
            else:
                outfile.close()
                print(str(output_file_num) + "th output file saved.")
                output_file_num += 1
                line_count = 1
                outfile = open(INPUT_FILE_NAME.split('.')[0] + "_" + str(output_file_num) + ".json", 'w')
                outfile.write(line)

    outfile.close()
    print(str(output_file_num) + "th output file saved.")